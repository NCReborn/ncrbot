const { SlashCommandBuilder } = require('discord.js');
const { findFAQMatchWithEmbeddings } = require('../faq/matcher');
const { getOpenAIAnswer } = require('../utils/openaiHelper');

// Discord message max length
const MAX_DISCORD_LEN = 2000;

module.exports = {
  data: new SlashCommandBuilder()
    .setName('ask')
    .setDescription('Ask a question and get an answer from the FAQ or AI.')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('Your question')
        .setRequired(true)
    ),
  async execute(interaction) {
    // Optional: If you have a toggle system for enabling/disabling the bot
    if (typeof askEnabled === 'function' && !askEnabled()) {
      return await interaction.reply({
        content: "The bot is temporarily unavailable.",
        ephemeral: true
      });
    }

    await interaction.deferReply({ ephemeral: true });

    try {
      const question = interaction.options.getString('question');
      const faqMatch = await findFAQMatchWithEmbeddings(question);

      if (faqMatch) {
        const modAnswer = `**(Mod Answer)**\n**Q:** ${question}\n**A:** ${faqMatch.answer}`;
        // Truncate if needed
        const safeModAnswer = modAnswer.length > MAX_DISCORD_LEN ? modAnswer.slice(0, MAX_DISCORD_LEN - 3) + "..." : modAnswer;
        await interaction.editReply({
          content: safeModAnswer,
        });
      } else {
        let aiAnswer = null;
        try {
          aiAnswer = await getOpenAIAnswer(question);
        } catch (err) {
          console.error('OpenAI error:', err);
          aiAnswer = "Sorry, there was a problem generating an AI answer. Please try again later.";
        }

        const note = "\n\n*Note: This answer was generated by AI. If it doesn't help, please ask in ‚Å†ü¶†‚îÉbugs-and-issues.*" +
                     "\nYou can also provide crash logs to <@1414027269680267274> or <@1287876503811653785> (for large files).";
        const format = `**(AI-generated answer)**\n**Q:** ${question}\n**A:** `;
        // Calculate how much space is left for the answer
        const maxAnswerLen = MAX_DISCORD_LEN - format.length - note.length;
        // Truncate answer if needed
        let safeAnswer = aiAnswer;
        if (aiAnswer.length > maxAnswerLen) {
          safeAnswer = aiAnswer.slice(0, maxAnswerLen - 3) + "...";
        }

        await interaction.editReply({
          content: `${format}${safeAnswer}${note}`,
        });
      }
    } catch (err) {
      console.error('Error in /ask command:', err);
      try {
        await interaction.editReply({
          content: "There was an error executing this command!",
        });
      } catch (editErr) {
        console.error('Failed to edit reply:', editErr);
      }
    }
  },
};
