const { SlashCommandBuilder } = require('discord.js');
const { findFAQMatchWithEmbeddings } = require('../faq/matcher');
const { getOpenAIAnswer } = require('../utils/openaiHelper');

// Discord max message length
const MAX_DISCORD_LEN = 2000;

module.exports = {
  data: new SlashCommandBuilder()
    .setName('ask')
    .setDescription('Ask a question and get an answer from the FAQ or AI.')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('Your question')
        .setRequired(true)
    ),
  async execute(interaction) {
    // Defensive: always wrap everything in try/catch to prevent uncaught bot crashes
    try {
      const question = interaction.options.getString('question');
      // Defer reply (no ephemeral)
      await interaction.deferReply();

      // First: FAQ match
      let faqMatch = null;
      try {
        faqMatch = await findFAQMatchWithEmbeddings(question);
      } catch (faqErr) {
        console.error('FAQ matcher error:', faqErr);
      }

      if (faqMatch) {
        const modAnswer = `**(Mod Answer)**\n**Q:** ${question}\n**A:** ${faqMatch.answer}`;
        const safeModAnswer = 
          modAnswer.length > MAX_DISCORD_LEN 
            ? modAnswer.slice(0, MAX_DISCORD_LEN - 3) + "..." 
            : modAnswer;
        await interaction.editReply({
          content: safeModAnswer,
        });
        return;
      }

      // --- AI fallback ---
      let aiAnswer;
      try {
        aiAnswer = await getOpenAIAnswer(question);
      } catch (openaiErr) {
        console.error('OpenAI error:', openaiErr);
        aiAnswer = "Sorry, there was a problem generating an AI answer. Please try again later.";
      }

      const note = "\n\n*Note: This answer was generated by AI. If it doesn't help, please ask in <#support-channel-id>.*";
      const format = `**(AI-generated answer)**\n**Q:** ${question}\n**A:** `;
      const maxAnswerLen = MAX_DISCORD_LEN - format.length - note.length;
      let safeAnswer = aiAnswer;
      if (aiAnswer.length > maxAnswerLen) {
        safeAnswer = aiAnswer.slice(0, maxAnswerLen - 3) + "...";
      }

      await interaction.editReply({
        content: `${format}${safeAnswer}${note}`,
      });
    } catch (err) {
      console.error('Error in /ask command:', err);
      try {
        await interaction.editReply({
          content: "There was an error executing this command!",
        });
      } catch (editErr) {
        console.error('Failed to edit reply:', editErr);
      }
    }
  },
};
